// Prisma schema definition
// Run: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  persons   Person[]
  companies Company[]
  posts     Post[]  
  purchases Purchase[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  type      String
  createdAt DateTime @default(now())
}

model Person {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  birthYear Int
  highSchool String
  description String
  cv        String?

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Company {
  id             Int    @id @default(autoincrement())
  rut            Int
  name           String
  legalReason    String
  commercialName String
  groupName      String
  subGroupName   String

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  description String

  purchases   Purchase[]
}

model Purchase {
  id        Int    @id @default(autoincrement())
  price     Int
  currency  String

  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])

  userId    Int
  user      User @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  authorId  Int
  author    User @relation(fields: [authorId], references: [id])

  images    Image[]
  comments  Comment[]
  likes     Like[]
}

model Image {
  id          Int    @id @default(autoincrement())
  sizeKb      Int
  description String

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  authorId  Int
  author    User @relation(fields: [authorId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}

model Chat {
  id        Int      @id @default(autoincrement())
  isDirect  Boolean?
  lastMsgId Int?

  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  type      String
  content   String
  reactions String?

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id])
}

model Like {
  id      Int  @id @default(autoincrement())

  userId  Int
  user    User @relation(fields: [userId], references: [id])

  postId  Int
  post    Post @relation(fields: [postId], references: [id])
}
