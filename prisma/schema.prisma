// Prisma schema definition
// Run: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =========================
// Core
// =========================
enum Role {
  persons
  companies
  Admin
}
model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  role       Role       @default(persons)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  persons    Person[]
  companies  Company[]
  comments   Comment[]
  likes      Like[]
  posts      Post[]
  purchases  Purchase[]
  admin      Admin?

}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  type      String
  createdAt DateTime @default(now())
}

// =========================
// Profiles
// =========================
model Person {
  id          Int     @id @default(autoincrement())
  firstName   String
  lastName    String
  birthday    Int
  Ci          Int
  highSchool  String
  description String
  cv          String?
  linkedin    String?

  userId  Int
  user    User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Company {
  id           Int     @id @default(autoincrement())
  rut          String  @unique // en UY suele ser string (con dígito verificador)
  name         String
  legalReason  String
  groupName    String
  subGroupName String

  userId Int
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}
enum AdminRole {
  ADMIN
  SUPERADMIN
  MODERATOR
}

model Admin {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])

  role      AdminRole  @default(ADMIN)
  isActive  Boolean    @default(true)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([role])
}

// =========================
// Courses & Purchases
// =========================
model Course {
  courseId    Int         @id @default(autoincrement())
  title       String
  description String
  duration    Int
  theme       String
  price       Int
  
  purchases   Purchase[]
}

model Purchase {
  id       Int     @id @default(autoincrement())
  price    Int
  currency String

  courseId Int
  course   Course  @relation(fields: [courseId], references: [courseId])

  userId   Int
  user     User    @relation(fields: [userId], references: [id])

  @@index([courseId])
  @@index([userId])
}

// =========================
// Social (Posts, Images, Comments, Likes)
// =========================
model Post {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())

  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])

  images    Image[]
  comments  Comment[]
  likes     Like[]

  @@index([authorId])
}

model Image {
  id          Int    @id @default(autoincrement())
  sizeKb      Int
  description String

  postId Int
  post   Post   @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  postId    Int
  post      Post     @relation(fields: [postId], references: [id])

  @@index([authorId])
  @@index([postId])
}

model Like {
  id      Int   @id @default(autoincrement())

  userId  Int
  user    User  @relation(fields: [userId], references: [id])

  postId  Int
  post    Post  @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // evita likes duplicados del mismo user al mismo post
  @@index([postId])
}
model Chat {
  id        Int       @id @default(autoincrement())
  isDirect  Boolean?  // opcional
  lastMsgId Int?      // podés luego relacionarlo a Message si querés

  messages  Message[]
}

model Message {
  id        Int     @id @default(autoincrement())
  type      String
  content   String
  reactions String?

  chatId Int
  chat   Chat    @relation(fields: [chatId], references: [id])

  @@index([chatId])
}
model Postulation {
  id_postulation Int           @id @default(autoincrement())
  title          String        @db.VarChar(100)
  description    String
  company_name   String        @db.VarChar(100)
  location       String        @db.VarChar(100)
  area           String        @db.VarChar(50)
  requirements   String
  job_type       JobType
  themes         String?       @db.VarChar(100)
  posted_at      DateTime      @default(now())
  status         Status        @default(ACTIVA)
  applications   JobApplication[]

  @@map("postulaciones") // opcional: si tu tabla en SQL se llama así
}

model JobApplication {
  id_application Int          @id @default(autoincrement())
  id_person      Int
  postulation_id Int
  message        String?
  applied_at     DateTime      @default(now())
  postulation    Postulation   @relation(fields: [postulation_id], references: [id_postulation])

  @@map("postulaciones_aplicaciones") // opcional: nombre real de la tabla
}

enum JobType {
  TIEMPO_COMPLETO
  MEDIO_TIEMPO
  FREELANCE
  PRACTICAS
}

enum Status {
  ACTIVA
  CERRADA
}

